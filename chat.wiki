= 聊天服 =

* 聊天服 分为两部分 chatx 和 routerx 要想连自己的服 需要修改本地的conf下的app配置
  客户端连接chat的代码是写死的 需要手动改代码authcmanager.cs const string postUrl = "http://10.0.2.228:9999/router/v1/login"; 


== 重构前的梳理 ==
=== route ===
1. 验证 登陆时根据各种key md5进行验证
2. 然后redis记录玩家的serverId
3. 给客户端chat的地址 然后客户端连接chat服务器 (现在是客户端写死的)
4. sendMsg 这个api客户端好像并没有使用 连上chat服务后 基本上都是和chatx发送消息

=== chatx ===
1. chatx管理了客户端的session(使用net.Conn tcp)和chatx之间的session(使用grpc)
   * chatrpc处理 与其他chatx的消息
   * chat 处理客户端的消息

2. chatx登陆
   - 根据session id 判断是否之前不在本服 需要踢掉之前的登陆 如果不在本服 还需要去其他服踢
   - redis写入当前聊天服id
   - 通知其他服 有人登陆了 也就是每个服都会有玩家的聊天服id的信息
   - 拉取离线消息

3. room流程
   - JoinRoom: 就是没有房间创建 有房间添加至房间member列表 拉取最近20条消息返回
   - Msg中如果是频道消息 那么找到房间广播给这个房间的所有人
      这里如果玩家不在此chatx服 还得通知其他chatx服下发
   - LeaveRoom: 将玩家从member中删除

4. 私聊
   - 私聊对象在本服 直接发送
   - 私聊对象在别的服 同步给别的chatx
   - 如果找不到 则存离线消息redis
 
=== idea ===
* 如果是无状态的chatx 我觉得可以在chatx上面有一个订阅服务
  这一层订阅服务是知道所有的room信息的 （还没有看完goim的实现 看一下他是怎么做的)
  否则就得需要chatx之间的通信 效率低 可能跨多个服务器（如之前的做法: 把消息还要广播给其他服务器)
